From 1c0a767277f77496469e55f01faec6f342daf2ce Mon Sep 17 00:00:00 2001
From: Yuan Liao <liaoyuan@gmail.com>
Date: Tue, 22 Feb 2022 10:02:21 -0800
Subject: [PATCH] Remove uses of Appender in test verifications for
 log4j-12-api bridge

Tests that rely on an Appender to verify whether messages have been
correctly logged no longer work with the log4j-12-api bridge because
the methods for adding an Appender in the bridge "are largely no-ops":
https://logging.apache.org/log4j/log4j-2.2/log4j-1.2-api/index.html

Signed-off-by: Yuan Liao <liaoyuan@gmail.com>
---
 .../bridge/SLF4JBridgeHandlerPerfTest.java    | 15 ++++--
 .../slf4j/bridge/SLF4JBridgeHandlerTest.java  | 53 +------------------
 2 files changed, 12 insertions(+), 56 deletions(-)

diff --git a/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerPerfTest.java b/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerPerfTest.java
index 604ec1d..36103aa 100644
--- a/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerPerfTest.java
+++ b/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerPerfTest.java
@@ -27,8 +27,11 @@ package org.slf4j.bridge;
 import java.util.logging.Handler;
 import java.util.logging.LogManager;
 
-import org.apache.log4j.FileAppender;
+import org.apache.log4j.Appender;
 import org.apache.log4j.PatternLayout;
+import org.apache.log4j.bridge.AppenderWrapper;
+import org.apache.log4j.bridge.LayoutAdapter;
+import org.apache.logging.log4j.core.appender.FileAppender;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -42,7 +45,7 @@ public class SLF4JBridgeHandlerPerfTest {
     // set to false to test enabled logging performance
     boolean disabledLogger = true;
 
-    FileAppender fileAppender;
+    Appender fileAppender;
     org.apache.log4j.Logger log4jRoot;
     java.util.logging.Logger julRootLogger = LogManager.getLogManager().getLogger("");
 
@@ -53,7 +56,11 @@ public class SLF4JBridgeHandlerPerfTest {
 
     @Before
     public void setUp() throws Exception {
-        fileAppender = new FileAppender(new PatternLayout("%r [%t] %p %c %x - %m%n"), "target/test-output/toto.log");
+        fileAppender = new AppenderWrapper(FileAppender.newBuilder()
+                .setLayout(new LayoutAdapter(new PatternLayout("%r [%t] %p %c %x - %m%n")))
+                .withFileName("target/test-output/toto.log")
+                .setName(this.getClass().getName())
+                .build());
 
         existingHandlers = julRootLogger.getHandlers();
         for (int i = 0; i < existingHandlers.length; i++) {
@@ -67,7 +74,7 @@ public class SLF4JBridgeHandlerPerfTest {
     public void tearDown() throws Exception {
         SLF4JBridgeHandler.uninstall();
         fileAppender.close();
-        log4jRoot.getLoggerRepository().resetConfiguration();
+        org.apache.log4j.LogManager.getLoggerRepository().resetConfiguration();
         for (int i = 0; i < existingHandlers.length; i++) {
             julRootLogger.addHandler(existingHandlers[i]);
         }
diff --git a/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerTest.java b/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerTest.java
index 71e4bc5..bd24cd6 100755
--- a/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerTest.java
+++ b/jul-to-slf4j/src/test/java/org/slf4j/bridge/SLF4JBridgeHandlerTest.java
@@ -55,7 +55,7 @@ public class SLF4JBridgeHandlerTest {
     @After
     public void tearDown() throws Exception {
         SLF4JBridgeHandler.uninstall();
-        log4jRoot.getLoggerRepository().resetConfiguration();
+        org.apache.log4j.LogManager.getLoggerRepository().resetConfiguration();
     }
 
     @Test
@@ -63,19 +63,6 @@ public class SLF4JBridgeHandlerTest {
         SLF4JBridgeHandler.install();
         String msg = "msg";
         julLogger.info(msg);
-        assertEquals(1, listAppender.list.size());
-        LoggingEvent le = (LoggingEvent) listAppender.list.get(0);
-        assertEquals(LOGGER_NAME, le.getLoggerName());
-        assertEquals(msg, le.getMessage());
-
-        // get the location info in the event.
-        // Note that this must have been computed previously
-        // within an appender for the following assertion to
-        // work properly
-        LocationInfo li = le.getLocationInformation();
-        System.out.println(li.fullInfo);
-        assertEquals("SLF4JBridgeHandlerTest.java", li.getFileName());
-        assertEquals("testSmoke", li.getMethodName());
     }
 
     @Test
@@ -91,14 +78,6 @@ public class SLF4JBridgeHandlerTest {
         julLogger.warning(msg);
         julLogger.severe(msg);
 
-        assertEquals(6, listAppender.list.size());
-        int i = 0;
-        assertLevel(i++, org.apache.log4j.Level.TRACE);
-        assertLevel(i++, org.apache.log4j.Level.DEBUG);
-        assertLevel(i++, org.apache.log4j.Level.DEBUG);
-        assertLevel(i++, org.apache.log4j.Level.INFO);
-        assertLevel(i++, org.apache.log4j.Level.WARN);
-        assertLevel(i++, org.apache.log4j.Level.ERROR);
     }
 
     @Test
@@ -114,10 +93,6 @@ public class SLF4JBridgeHandlerTest {
         java.util.logging.Logger julResourceBundleLogger = java.util.logging.Logger.getLogger("yay", resourceBundleName);
 
         julResourceBundleLogger.info(msg);
-        assertEquals(1, listAppender.list.size());
-        LoggingEvent le = (LoggingEvent) listAppender.list.get(0);
-        assertEquals(LOGGER_NAME, le.getLoggerName());
-        assertEquals(expectedMsg, le.getMessage());
     }
 
     @Test
@@ -145,25 +120,6 @@ public class SLF4JBridgeHandlerTest {
 
         julLogger.log(Level.INFO, resourceKey3, params3); // 4th log
 
-        assertEquals(4, listAppender.list.size());
-
-        LoggingEvent le = null;
-
-        le = (LoggingEvent) listAppender.list.get(0);
-        assertEquals("foo", le.getLoggerName());
-        assertEquals(expectedMsg1, le.getMessage());
-
-        le = (LoggingEvent) listAppender.list.get(1);
-        assertEquals("foo", le.getLoggerName());
-        assertEquals(expectedMsg2, le.getMessage());
-
-        le = (LoggingEvent) listAppender.list.get(2);
-        assertEquals("foo", le.getLoggerName());
-        assertEquals(expectedMsg3, le.getMessage());
-
-        le = (LoggingEvent) listAppender.list.get(3);
-        assertEquals("yay", le.getLoggerName());
-        assertEquals(expectedMsg3, le.getMessage());
     }
 
     @Test
@@ -172,10 +128,6 @@ public class SLF4JBridgeHandlerTest {
         String msg = "msg {non-number-string}";
         julLogger.logp(Level.INFO, "SLF4JBridgeHandlerTest", "testLogWithPlaceholderNoParameters", msg, new Object[0]);
 
-        assertEquals(1, listAppender.list.size());
-        LoggingEvent le = (LoggingEvent) listAppender.list.get(0);
-        assertEquals(LOGGER_NAME, le.getLoggerName());
-        assertEquals(msg, le.getMessage());
     }
 
     // See http://jira.qos.ch/browse/SLF4J-337
@@ -186,9 +138,6 @@ public class SLF4JBridgeHandlerTest {
         String msg = "foo {18=bad} {0}";
 
         julLogger.log(Level.INFO, msg, "ignored parameter due to IllegalArgumentException");
-        assertEquals(1, listAppender.list.size());
-        LoggingEvent le = (LoggingEvent) listAppender.list.get(0);
-        assertEquals(msg, le.getMessage());
     }
 
     void assertLevel(int index, org.apache.log4j.Level expectedLevel) {
-- 
2.34.1

